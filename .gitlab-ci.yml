# GitLab CI/CD Pipeline for nrest.nvim
# Runs automated tests on every push and merge request

image: alpine:latest

# Define stages
stages:
  - test

# Cache dependencies between jobs
cache:
  paths:
    - .local/

# Run tests on multiple Neovim versions
.test_template: &test_template
  stage: test
  before_script:
    # Install dependencies
    - apk add --no-cache git curl bash neovim
    # Install plenary.nvim for testing
    - mkdir -p ~/.local/share/nvim/site/pack/vendor/start
    - |
      if [ ! -d ~/.local/share/nvim/site/pack/vendor/start/plenary.nvim ]; then
        git clone --depth 1 https://github.com/nvim-lua/plenary.nvim ~/.local/share/nvim/site/pack/vendor/start/plenary.nvim
      fi
  script:
    # Show Neovim version
    - nvim --version
    # Run test suite
    - nvim --headless -u tests/minimal_init.lua -c "PlenaryBustedDirectory tests/ {minimal_init = 'tests/minimal_init.lua'}"
  tags:
    - docker
    - linux

# Test on stable Neovim (from Alpine packages)
test:neovim-stable:
  <<: *test_template
  only:
    - branches
    - merge_requests
    - tags

# Test with latest Neovim from source (optional, runs only on main)
test:neovim-latest:
  stage: test
  image: ubuntu:latest
  before_script:
    # Install build dependencies
    - apt-get update
    - apt-get install -y git curl build-essential cmake gettext ninja-build unzip
    # Build Neovim from source (latest stable tag)
    - git clone --depth 1 --branch stable https://github.com/neovim/neovim /tmp/neovim
    - cd /tmp/neovim
    - make CMAKE_BUILD_TYPE=RelWithDebInfo
    - make install
    - cd -
    # Install plenary.nvim
    - mkdir -p ~/.local/share/nvim/site/pack/vendor/start
    - git clone --depth 1 https://github.com/nvim-lua/plenary.nvim ~/.local/share/nvim/site/pack/vendor/start/plenary.nvim
  script:
    # Show Neovim version
    - nvim --version
    # Run test suite
    - nvim --headless -u tests/minimal_init.lua -c "PlenaryBustedDirectory tests/ {minimal_init = 'tests/minimal_init.lua'}"
  only:
    - main
    - develop
  tags:
    - docker
  allow_failure: true  # Don't block pipeline if latest build fails

# Optional: Lint with luacheck
lint:luacheck:
  stage: test
  image: alpine:latest
  before_script:
    - apk add --no-cache luarocks gcc musl-dev
    - luarocks install luacheck
  script:
    - luacheck lua/ --globals vim --no-unused-args
  only:
    - merge_requests
  tags:
    - docker
    - linux
  allow_failure: true  # Don't block on linting issues

# Optional: Check health (requires full Neovim setup)
check:health:
  stage: test
  image: alpine:latest
  before_script:
    - apk add --no-cache neovim curl
  script:
    # Basic check that plugin loads
    - nvim --headless -u NONE -c "set runtimepath+=." -c "lua require('nrest')" -c "quit"
    - echo "Plugin loads successfully"
  only:
    - main
    - merge_requests
  tags:
    - docker
    - linux
  allow_failure: true
